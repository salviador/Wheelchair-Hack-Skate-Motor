###############################################################################
#
# IAR ANSI C/C++ Compiler V9.20.1.318/W64 for ARM         06/Dec/2021  15:52:34
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Drivers\Peripherals_Drivers\src\rf_driver_hal_radio_2g4.c
#    Command line      =
#        -f "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Debug\Obj\Drivers\Peripherals_Drivers\rf_driver_hal_radio_2g4.o.rsp"
#        ("D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Drivers\Peripherals_Drivers\src\rf_driver_hal_radio_2g4.c"
#        -D USE_FULL_LL_DRIVER -D STEVAL_IDB011V1 -D CONFIG_DEVICE_BLUENRG_LP
#        -D CONFIG_HW_SMPS_10uH -D CONFIG_HW_HSE_TUNE=32 -D
#        USER_BUTTON=BSP_PUSH1 -D CONFIG_HW_LS_XTAL -D BLE_STACK_BASIC_CONF -D
#        __ARM_ARCH_6M__ -lC "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Debug\List\Drivers\Peripherals_Drivers"
#        --diag_suppress Pe1665 -o "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Debug\Obj\Drivers\Peripherals_Drivers"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.0\arm\inc\c\DLib_Config_Normal.h" -I
#        "D:\Progetti\Sedia Rotelle SkateMotor\BLE_IAR_BlueNRG_LP_Template\\"
#        -I "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Drivers\Peripherals_Drivers\Inc\\"
#        -I "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Drivers\CMSIS\Device\ST\BlueNRG_LP\Include\\"
#        -I "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Middlewares\ST\hal\Inc\\" -I
#        "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Middlewares\ST\PKAMGR\Inc\\" -I
#        "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Middlewares\ST\RNGMGR\Inc\\" -I
#        "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Middlewares\ST\AESMGR\Inc\\" -I
#        "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Middlewares\ST\BLECNTR\Inc\\"
#        -I "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Drivers\CMSIS\Include\\" -I
#        "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Drivers/BSP/STEVAL-IDB011V1/Inc\\"
#        -I "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Drivers\BSP\Common\Inc\\" -I
#        "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Drivers\BSP\Components\lps22hh_STdC\driver\\"
#        -I "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Drivers\BSP\Components\lsm6dsox_STdC\driver\\"
#        -I "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Middlewares\ST\BLE_Application\layers_inc\\"
#        -I "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Middlewares\ST\Bluetooth_LE\Inc\\"
#        -I "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Middlewares\ST\BLE_Application\OTA\inc\\"
#        -I "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Middlewares\ST\NVMDB\Inc\\" -I
#        "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Middlewares\ST\BLE_Application\Profiles\Inc\\"
#        -I "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Middlewares\ST\cryptolib\inc\\"
#        -I "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Middlewares\ST\cryptolib\inc\Common\\"
#        -I "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Middlewares\ST\cryptolib\inc\AES\\"
#        -On) --dependencies=n "D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Debug\Obj\Drivers\Peripherals_Drivers\rf_driver_hal_radio_2g4.o.d"
#    Locale            =  C
#    List file         =
#        D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Debug\List\Drivers\Peripherals_Drivers\rf_driver_hal_radio_2g4.lst
#    Object file       =
#        D:\Progetti\Sedia Rotelle
#        SkateMotor\BLE_IAR_BlueNRG_LP_Template\Debug\Obj\Drivers\Peripherals_Drivers\rf_driver_hal_radio_2g4.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

D:\Progetti\Sedia Rotelle SkateMotor\BLE_IAR_BlueNRG_LP_Template\Drivers\Peripherals_Drivers\src\rf_driver_hal_radio_2g4.c
      1          /**
      2            ******************************************************************************
      3            * @file    rf_driver_ll_radio_2g4.h
      4            * @author  RF Application Team
      5            * @brief   BlueNRG-LP HAL radio APIs 
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
     10            * All rights reserved.</center></h2>
     11            *
     12            * This software component is licensed by ST under BSD 3-Clause license,
     13            * the "License"; You may not use this file except in compliance with the
     14            * License. You may obtain a copy of the License at:
     15            *                        opensource.org/licenses/BSD-3-Clause
     16            *
     17            ******************************************************************************
     18            */
     19          #include "rf_driver_hal_radio_2g4.h"
     20          #include "rf_driver_hal_vtimer.h"
     21          
     22          /* Access address used only to sense medium with HAL_RADIO_CarrierSense() */
     23          #define FAKE_NETWORK_ID 0xAAAAAAAA
     24          
     25          #define TIME_DIFF(a, b)       ((int32_t)(a - b))
     26          

   \                                 In section .bss, align 4
     27          static ActionPacket aPacket[2]; 
   \                     aPacket:
   \        0x0                      DS8 128

   \                                 In section .data, align 4
     28          static uint32_t networkID = 0x88DF88DF;
   \                     networkID:
   \        0x0   0x88DF'88DF        DC32 2'296'350'943
     29          

   \                                 In section .text, align 2, keep-with-next
     30          static uint8_t CondRoutineTrue(ActionPacket* p)
     31          {
   \                     CondRoutineTrue: (+1)
   \        0x0   0x0001             MOVS     R1,R0
     32            return TRUE;
   \        0x2   0x2001             MOVS     R0,#+1
   \        0x4   0x4770             BX       LR
     33          }
     34          

   \                                 In section .text, align 2, keep-with-next
     35          static uint8_t dataRoutineNull(ActionPacket* current_action_packet, ActionPacket* next)
     36          {
   \                     dataRoutineNull: (+1)
   \        0x0   0x0002             MOVS     R2,R0
     37            return TRUE;
   \        0x2   0x2001             MOVS     R0,#+1
   \        0x4   0x4770             BX       LR
     38          }
     39          

   \                                 In section .text, align 2, keep-with-next
     40          static uint8_t CondRoutineRxTrue(ActionPacket* p)
     41          {
   \                     CondRoutineRxTrue: (+1)
   \        0x0   0xB500             PUSH     {LR}
   \        0x2   0x0001             MOVS     R1,R0
     42            /* received a packet */
     43            if((p->status & BLUE_INTERRUPT1REG_RCVOK) != 0){
   \        0x4   0x68C8             LDR      R0,[R1, #+12]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD501             BPL      ??CondRoutineRxTrue_0
     44              /* packet received without CRC error */ 
     45              return TRUE;
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xE000             B        ??CondRoutineRxTrue_1
     46            }
     47            return FALSE; 
   \                     ??CondRoutineRxTrue_0: (+1)
   \        0xE   0x2000             MOVS     R0,#+0
   \                     ??CondRoutineRxTrue_1: (+1)
   \       0x10   0xBD00             POP      {PC}
     48          }
     49          
     50          
     51          /**
     52          * @brief  This routine sets the network ID field for packet transmission and filtering for the receiving.
     53          *         Only two devices with same networkID can communicate with each other.
     54          * @param  ID: network ID based on bluetooth specification:
     55          *           1. It shall have no more than six consecutive zeros or ones.
     56          *           2. It shall not have all four octets equal.
     57          *           3. It shall have no more than 24 transitions.
     58          *           4. It shall have a minimum of two transitions in the most significant six bits.
     59          *
     60          * @retval uint8_t: return value
     61          *           - 0x00 : Success.
     62          *           - 0xC0 : Invalid parameter.
     63          */

   \                                 In section .text, align 2, keep-with-next
     64          uint8_t HAL_RADIO_SetNetworkID(uint32_t ID)
     65          {
   \                     HAL_RADIO_SetNetworkID: (+1)
   \        0x0   0x0001             MOVS     R1,R0
     66            networkID = ID;
   \        0x2   0x....             LDR      R0,??DataTable5
   \        0x4   0x6001             STR      R1,[R0, #+0]
     67            return 0;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x4770             BX       LR
     68          }
     69          
     70          
     71          /**
     72          * @brief  This routine sends a packet on a specific channel and at a specific time.
     73          * @param  channel: Frequency channel between 0 to 39.
     74          * @param  wakeup_time: Time of transmission in us. This is relative time regarding now.
     75          *         Minimum wakeup_time of 230 us. TBR
     76          * @param  txBuffer: Pointer to TX data buffer. Second byte of this buffer must be the length of the data.
     77          * @param  Callback: This function is being called as data routine.
     78          *         First ActionPacket is current action packet and the second one is next action packet.
     79          * @retval uint8_t return value
     80          *           - 0x00 : Success.
     81          *           - 0xC0 : Invalid parameter.
     82          *           - 0xC4 : Radio is busy, receiving has not been triggered.
     83          */

   \                                 In section .text, align 2, keep-with-next
     84          uint8_t HAL_RADIO_SendPacket(uint8_t channel, 
     85                                       uint32_t wakeup_time, 
     86                                       uint8_t* txBuffer, 
     87                                       uint8_t (*Callback)(ActionPacket*, ActionPacket*))
     88          {
   \                     HAL_RADIO_SendPacket: (+1)
   \        0x0   0xB5FF             PUSH     {R0-R7,LR}
   \        0x2   0xB083             SUB      SP,SP,#+12
     89            uint8_t returnValue = SUCCESS_0;
   \        0x4   0x2400             MOVS     R4,#+0
   \        0x6   0x0025             MOVS     R5,R4
     90            uint32_t dummy,time;
     91            
     92            time = (uint32_t)TIMER_GetCurrentSysTime() + TIMER_UsToSystime(wakeup_time);
   \        0x8   0x.... 0x....      BL       TIMER_GetCurrentSysTime
   \        0xC   0x0002             MOVS     R2,R0
   \        0xE   0x0016             MOVS     R6,R2
   \       0x10   0x9804             LDR      R0,[SP, #+16]
   \       0x12   0x.... 0x....      BL       TIMER_UsToSystime
   \       0x16   0x0032             MOVS     R2,R6
   \       0x18   0x1817             ADDS     R7,R2,R0
     93            
     94            if(channel > 39) {
   \       0x1A   0x4668             MOV      R0,SP
   \       0x1C   0x7B00             LDRB     R0,[R0, #+12]
   \       0x1E   0x2828             CMP      R0,#+40
   \       0x20   0xDB01             BLT      ??HAL_RADIO_SendPacket_0
     95              returnValue = INVALID_PARAMETER_C0;
   \       0x22   0x20C0             MOVS     R0,#+192
   \       0x24   0x0005             MOVS     R5,R0
     96            }
     97            
     98            if(RADIO_GetStatus(&dummy) != BLUE_IDLE_0) {
   \                     ??HAL_RADIO_SendPacket_0: (+1)
   \       0x26   0x4668             MOV      R0,SP
   \       0x28   0x.... 0x....      BL       RADIO_GetStatus
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD001             BEQ      ??HAL_RADIO_SendPacket_1
     99              returnValue = RADIO_BUSY_C4;
   \       0x30   0x20C4             MOVS     R0,#+196
   \       0x32   0x0005             MOVS     R5,R0
    100            }
    101            
    102            if(returnValue == SUCCESS_0) {
   \                     ??HAL_RADIO_SendPacket_1: (+1)
   \       0x34   0x0028             MOVS     R0,R5
   \       0x36   0xB2C0             UXTB     R0,R0
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD12C             BNE      ??HAL_RADIO_SendPacket_2
    103              uint8_t map[5]= {0xFF,0xFF,0xFF,0xFF,0xFF};
   \       0x3C   0xA801             ADD      R0,SP,#+4
   \       0x3E   0x....             LDR      R1,??DataTable5_1
   \       0x40   0xC90C             LDM      R1!,{R2,R3}
   \       0x42   0xC00C             STM      R0!,{R2,R3}
   \       0x44   0x3908             SUBS     R1,R1,#+8
   \       0x46   0x3808             SUBS     R0,R0,#+8
    104              RADIO_SetChannelMap(0, &map[0]);
   \       0x48   0xA901             ADD      R1,SP,#+4
   \       0x4A   0x2000             MOVS     R0,#+0
   \       0x4C   0x.... 0x....      BL       RADIO_SetChannelMap
    105              RADIO_SetChannel(0, channel, 0);
   \       0x50   0x2200             MOVS     R2,#+0
   \       0x52   0x4668             MOV      R0,SP
   \       0x54   0x7B01             LDRB     R1,[R0, #+12]
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0x.... 0x....      BL       RADIO_SetChannel
    106              RADIO_SetTxAttributes(0, networkID, 0x555555);
   \       0x5C   0x....             LDR      R2,??DataTable5_2
   \       0x5E   0x....             LDR      R0,??DataTable5
   \       0x60   0x6801             LDR      R1,[R0, #+0]
   \       0x62   0x2000             MOVS     R0,#+0
   \       0x64   0x.... 0x....      BL       RADIO_SetTxAttributes
    107          
    108              aPacket[0].StateMachineNo = STATE_MACHINE_0;
   \       0x68   0x....             LDR      R6,??DataTable5_3
   \       0x6A   0x0020             MOVS     R0,R4
   \       0x6C   0x7030             STRB     R0,[R6, #+0]
    109              aPacket[0].ActionTag =  TXRX | PLL_TRIG;
   \       0x6E   0x2003             MOVS     R0,#+3
   \       0x70   0x7070             STRB     R0,[R6, #+1]
    110              aPacket[0].WakeupTime = time;
   \       0x72   0x6077             STR      R7,[R6, #+4]
    111              aPacket[0].MaxReceiveLength = 0; /* does not affect for Tx */
   \       0x74   0x0020             MOVS     R0,R4
   \       0x76   0x70B0             STRB     R0,[R6, #+2]
    112              aPacket[0].data = txBuffer;
   \       0x78   0x9805             LDR      R0,[SP, #+20]
   \       0x7A   0x60B0             STR      R0,[R6, #+8]
    113              aPacket[0].next_true = NULL_0;
   \       0x7C   0x62F4             STR      R4,[R6, #+44]
    114              aPacket[0].next_false = NULL_0;
   \       0x7E   0x6334             STR      R4,[R6, #+48]
    115              aPacket[0].condRoutine = CondRoutineTrue;
   \       0x80   0x....             LDR      R0,??DataTable6
   \       0x82   0x6370             STR      R0,[R6, #+52]
    116              aPacket[0].dataRoutine = Callback;
   \       0x84   0x9806             LDR      R0,[SP, #+24]
   \       0x86   0x63B0             STR      R0,[R6, #+56]
    117              
    118              RADIO_SetReservedArea(&aPacket[0]); 
   \       0x88   0x0030             MOVS     R0,R6
   \       0x8A   0x.... 0x....      BL       RADIO_SetReservedArea
    119              returnValue = RADIO_MakeActionPacketPending(&aPacket[0]);
   \       0x8E   0x0030             MOVS     R0,R6
   \       0x90   0x.... 0x....      BL       RADIO_MakeActionPacketPending
   \       0x94   0x0005             MOVS     R5,R0
    120            }
    121            
    122            return returnValue; 
   \                     ??HAL_RADIO_SendPacket_2: (+1)
   \       0x96   0x0028             MOVS     R0,R5
   \       0x98   0xB2C0             UXTB     R0,R0
   \       0x9A   0xB007             ADD      SP,SP,#+28
   \       0x9C   0xBDF0             POP      {R4-R7,PC}
    123          }
    124          
    125          
    126          /**
    127          * @brief  This routine sends a packet on a specific channel and at a certain time then wait for receiving acknowledge.
    128          * @param  channel: Frequency channel between 0 to 39.
    129          * @param  wakeup_time: Time of transmission based on us. This is relative time regarding now.
    130          *         Minimum wakeup_time of 250 us. TBR
    131          * @param  txBuffer: Pointer to TX data buffer. Secound byte of this buffer must be the length of the data.
    132          * @param  rxBuffer: Pointer to RX data buffer. Secound byte of this buffer must be the length of the data.
    133          * @param  receive_timeout: Time of RX window used to wait for the packet on us.
    134          * @param  receive_length: number of bytes that the link layer accepts in reception.
    135          * @param  callback: This function is being called as data routine.
    136          *         First ActionPacket is current action packet and the second one is next action packet.
    137          * @retval uint8_t return value
    138          *           - 0x00 : Success.
    139          *           - 0xC0 : Invalid parameter.
    140          *           - 0xC4 : Radio is busy, receiving has not been triggered.
    141          */

   \                                 In section .text, align 2, keep-with-next
    142          uint8_t HAL_RADIO_SendPacketWithAck(uint8_t channel, 
    143                                              uint32_t wakeup_time, 
    144                                              uint8_t* txBuffer, 
    145                                              uint8_t* rxBuffer,
    146                                              uint32_t receive_timeout, 
    147                                              uint8_t receive_length,
    148                                              uint8_t (*Callback)(ActionPacket*, ActionPacket*))
    149          {
   \                     HAL_RADIO_SendPacketWithAck: (+1)
   \        0x0   0xB5FF             PUSH     {R0-R7,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
    150            uint8_t returnValue = SUCCESS_0;
   \        0x4   0x2400             MOVS     R4,#+0
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x4669             MOV      R1,SP
   \        0xA   0x7008             STRB     R0,[R1, #+0]
    151            uint32_t dummy,time;
    152            
    153            time = (uint32_t)TIMER_GetCurrentSysTime() + TIMER_UsToSystime(wakeup_time);
   \        0xC   0x.... 0x....      BL       TIMER_GetCurrentSysTime
   \       0x10   0x0002             MOVS     R2,R0
   \       0x12   0x0015             MOVS     R5,R2
   \       0x14   0x9806             LDR      R0,[SP, #+24]
   \       0x16   0x.... 0x....      BL       TIMER_UsToSystime
   \       0x1A   0x002A             MOVS     R2,R5
   \       0x1C   0x1817             ADDS     R7,R2,R0
    154            
    155            if(channel > 39) {
   \       0x1E   0x4668             MOV      R0,SP
   \       0x20   0x7D00             LDRB     R0,[R0, #+20]
   \       0x22   0x2828             CMP      R0,#+40
   \       0x24   0xDB02             BLT      ??HAL_RADIO_SendPacketWithAck_0
    156              returnValue = INVALID_PARAMETER_C0;      
   \       0x26   0x20C0             MOVS     R0,#+192
   \       0x28   0x4669             MOV      R1,SP
   \       0x2A   0x7008             STRB     R0,[R1, #+0]
    157            }
    158          
    159            if(RADIO_GetStatus(&dummy) != BLUE_IDLE_0) {
   \                     ??HAL_RADIO_SendPacketWithAck_0: (+1)
   \       0x2C   0xA801             ADD      R0,SP,#+4
   \       0x2E   0x.... 0x....      BL       RADIO_GetStatus
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD002             BEQ      ??HAL_RADIO_SendPacketWithAck_1
    160              returnValue = RADIO_BUSY_C4;
   \       0x36   0x20C4             MOVS     R0,#+196
   \       0x38   0x4669             MOV      R1,SP
   \       0x3A   0x7008             STRB     R0,[R1, #+0]
    161            }
    162                
    163            uint8_t map[5]= {0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU};
   \                     ??HAL_RADIO_SendPacketWithAck_1: (+1)
   \       0x3C   0xA802             ADD      R0,SP,#+8
   \       0x3E   0x....             LDR      R1,??DataTable6_1
   \       0x40   0xC90C             LDM      R1!,{R2,R3}
   \       0x42   0xC00C             STM      R0!,{R2,R3}
   \       0x44   0x3908             SUBS     R1,R1,#+8
   \       0x46   0x3808             SUBS     R0,R0,#+8
    164            RADIO_SetChannelMap(0, &map[0]);
   \       0x48   0xA902             ADD      R1,SP,#+8
   \       0x4A   0x2000             MOVS     R0,#+0
   \       0x4C   0x.... 0x....      BL       RADIO_SetChannelMap
    165            RADIO_SetChannel(0, channel, 0);
   \       0x50   0x2200             MOVS     R2,#+0
   \       0x52   0x4668             MOV      R0,SP
   \       0x54   0x7D01             LDRB     R1,[R0, #+20]
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0x.... 0x....      BL       RADIO_SetChannel
    166            RADIO_SetTxAttributes(0, networkID, 0x555555);
   \       0x5C   0x....             LDR      R2,??DataTable5_2
   \       0x5E   0x....             LDR      R0,??DataTable5
   \       0x60   0x6801             LDR      R1,[R0, #+0]
   \       0x62   0x2000             MOVS     R0,#+0
   \       0x64   0x.... 0x....      BL       RADIO_SetTxAttributes
    167            RADIO_SetGlobalReceiveTimeout(receive_timeout);
   \       0x68   0x980E             LDR      R0,[SP, #+56]
   \       0x6A   0x.... 0x....      BL       RADIO_SetGlobalReceiveTimeout
    168            
    169            aPacket[0].StateMachineNo = 0;
   \       0x6E   0x....             LDR      R5,??DataTable5_3
   \       0x70   0x0020             MOVS     R0,R4
   \       0x72   0x7028             STRB     R0,[R5, #+0]
    170            aPacket[0].ActionTag = TXRX | PLL_TRIG;
   \       0x74   0x2003             MOVS     R0,#+3
   \       0x76   0x7068             STRB     R0,[R5, #+1]
    171            aPacket[0].WakeupTime = time;
   \       0x78   0x606F             STR      R7,[R5, #+4]
    172            aPacket[0].MaxReceiveLength = 0; /* does not affect for Tx */
   \       0x7A   0x0020             MOVS     R0,R4
   \       0x7C   0x70A8             STRB     R0,[R5, #+2]
    173            aPacket[0].data = txBuffer;
   \       0x7E   0x9807             LDR      R0,[SP, #+28]
   \       0x80   0x60A8             STR      R0,[R5, #+8]
    174            aPacket[0].next_true = &aPacket[1];
   \       0x82   0x002E             MOVS     R6,R5
   \       0x84   0x3640             ADDS     R6,R6,#+64
   \       0x86   0x62EE             STR      R6,[R5, #+44]
    175            aPacket[0].next_false = &aPacket[1];
   \       0x88   0x632E             STR      R6,[R5, #+48]
    176            aPacket[0].condRoutine = CondRoutineTrue;
   \       0x8A   0x....             LDR      R0,??DataTable6
   \       0x8C   0x6368             STR      R0,[R5, #+52]
    177            aPacket[0].dataRoutine = dataRoutineNull;
   \       0x8E   0x....             LDR      R1,??DataTable6_2
   \       0x90   0x63A9             STR      R1,[R5, #+56]
    178            
    179            aPacket[1].StateMachineNo = STATE_MACHINE_0;   
   \       0x92   0x0021             MOVS     R1,R4
   \       0x94   0x7031             STRB     R1,[R6, #+0]
    180            aPacket[1].ActionTag = 0;   
   \       0x96   0x0021             MOVS     R1,R4
   \       0x98   0x2241             MOVS     R2,#+65
   \       0x9A   0x54A9             STRB     R1,[R5, R2]
    181            aPacket[1].WakeupTime = time;
   \       0x9C   0x646F             STR      R7,[R5, #+68]
    182            aPacket[1].MaxReceiveLength = receive_length; 
   \       0x9E   0xA90F             ADD      R1,SP,#+60
   \       0xA0   0x7809             LDRB     R1,[R1, #+0]
   \       0xA2   0x2242             MOVS     R2,#+66
   \       0xA4   0x54A9             STRB     R1,[R5, R2]
    183            aPacket[1].data = rxBuffer; 
   \       0xA6   0x9908             LDR      R1,[SP, #+32]
   \       0xA8   0x64A9             STR      R1,[R5, #+72]
    184            aPacket[1].next_true = NULL_0;
   \       0xAA   0x66EC             STR      R4,[R5, #+108]
    185            aPacket[1].next_false = NULL_0;    
   \       0xAC   0x672C             STR      R4,[R5, #+112]
    186            aPacket[1].condRoutine = CondRoutineTrue;
   \       0xAE   0x6768             STR      R0,[R5, #+116]
    187            aPacket[1].dataRoutine = Callback;
   \       0xB0   0x9810             LDR      R0,[SP, #+64]
   \       0xB2   0x67A8             STR      R0,[R5, #+120]
    188          
    189            RADIO_SetReservedArea(&aPacket[0]);
   \       0xB4   0x0028             MOVS     R0,R5
   \       0xB6   0x.... 0x....      BL       RADIO_SetReservedArea
    190            RADIO_SetReservedArea(&aPacket[1]);
   \       0xBA   0x0030             MOVS     R0,R6
   \       0xBC   0x.... 0x....      BL       RADIO_SetReservedArea
    191            returnValue = RADIO_MakeActionPacketPending(&aPacket[0]);    
   \       0xC0   0x0028             MOVS     R0,R5
   \       0xC2   0x.... 0x....      BL       RADIO_MakeActionPacketPending
    192              
    193            return returnValue; 
   \       0xC6   0xB2C0             UXTB     R0,R0
   \       0xC8   0xB009             ADD      SP,SP,#+36
   \       0xCA   0xBDF0             POP      {R4-R7,PC}
    194          }
    195          
    196          

   \                                 In section .text, align 2, keep-with-next
    197          static uint8_t CarrierSenseCallback(ActionPacket* p, ActionPacket* next)
    198          {  
   \                     CarrierSenseCallback: (+1)
   \        0x0   0x0002             MOVS     R2,R0
    199            return TRUE;  
   \        0x2   0x2001             MOVS     R0,#+1
   \        0x4   0x4770             BX       LR
    200          }
    201          
    202          /**
    203          * @brief  This funtion puts the radio in RX state to read the RSSI.
    204          * @note   The function uses a busy loop to wait for the RSSI value and then exits
    205          *         from RX state.
    206          * @param      channel: Frequency channel between 0 to 39.
    207          * @param[out] rssi: the measured RSSI value on the channel
    208          * @retval uint8_t return value
    209          *           - 0x00 : Success.
    210          *           - 0xC0 : Invalid parameter.
    211          *           - 0xC4 : Radio is busy, receiving has not been triggered.
    212          */

   \                                 In section .text, align 2, keep-with-next
    213          uint8_t HAL_RADIO_CarrierSense(uint8_t channel, int8_t *rssi)
    214          {
   \                     HAL_RADIO_CarrierSense: (+1)
   \        0x0   0xB5F3             PUSH     {R0,R1,R4-R7,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
    215            uint8_t ret;
    216            uint16_t loop = 0;
   \        0x4   0x2500             MOVS     R5,#+0
   \        0x6   0x002C             MOVS     R4,R5
    217            uint32_t *DEMOD_DIG_TST_p = (uint32_t*)0x60001564;
   \        0x8   0x....             LDR      R0,??DataTable6_3
   \        0xA   0x9003             STR      R0,[SP, #+12]
    218            uint32_t end_time;
    219            static uint8_t buffer[1];
    220            
    221            *rssi = 127;
   \        0xC   0x207F             MOVS     R0,#+127
   \        0xE   0x9906             LDR      R1,[SP, #+24]
   \       0x10   0x7008             STRB     R0,[R1, #+0]
    222              
    223            uint8_t networkID_tmp = networkID;
   \       0x12   0x....             LDR      R7,??DataTable5
   \       0x14   0x6838             LDR      R0,[R7, #+0]
   \       0x16   0x4669             MOV      R1,SP
   \       0x18   0x7208             STRB     R0,[R1, #+8]
    224            
    225            networkID = FAKE_NETWORK_ID;
   \       0x1A   0x....             LDR      R0,??DataTable6_4
   \       0x1C   0x6038             STR      R0,[R7, #+0]
    226            
    227            ret = HAL_RADIO_ReceivePacket(channel, 240, buffer, 1000, sizeof(buffer), CarrierSenseCallback);
   \       0x1E   0x....             LDR      R0,??DataTable6_5
   \       0x20   0x9001             STR      R0,[SP, #+4]
   \       0x22   0x2001             MOVS     R0,#+1
   \       0x24   0x9000             STR      R0,[SP, #+0]
   \       0x26   0x23FA             MOVS     R3,#+250
   \       0x28   0x009B             LSLS     R3,R3,#+2
   \       0x2A   0x....             LDR      R2,??DataTable6_6
   \       0x2C   0x21F0             MOVS     R1,#+240
   \       0x2E   0x4668             MOV      R0,SP
   \       0x30   0x7D00             LDRB     R0,[R0, #+20]
   \       0x32   0x.... 0x....      BL       HAL_RADIO_ReceivePacket
   \       0x36   0x0006             MOVS     R6,R0
    228            
    229            networkID = networkID_tmp;
   \       0x38   0x4668             MOV      R0,SP
   \       0x3A   0x7A00             LDRB     R0,[R0, #+8]
   \       0x3C   0x6038             STR      R0,[R7, #+0]
    230            
    231            if(ret)
   \       0x3E   0x0030             MOVS     R0,R6
   \       0x40   0xB2C0             UXTB     R0,R0
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xD002             BEQ      ??HAL_RADIO_CarrierSense_0
    232              return ret;
   \       0x46   0x0030             MOVS     R0,R6
   \       0x48   0xB2C0             UXTB     R0,R0
   \       0x4A   0xE028             B        ??HAL_RADIO_CarrierSense_1
    233            
    234            /* loop variable just to protect from inifinite loop */
    235            while((RRM->FSM_STATUS_DIG_OUT & RRM_FSM_STATUS_DIG_OUT_STATUS) != 0x1A && loop++ < 60000);  
   \                     ??HAL_RADIO_CarrierSense_0: (+1)
   \       0x4C   0x....             LDR      R0,??DataTable6_7
   \       0x4E   0x6800             LDR      R0,[R0, #+0]
   \       0x50   0x06C0             LSLS     R0,R0,#+27
   \       0x52   0x0EC0             LSRS     R0,R0,#+27
   \       0x54   0x281A             CMP      R0,#+26
   \       0x56   0xD006             BEQ      ??HAL_RADIO_CarrierSense_2
   \       0x58   0x0020             MOVS     R0,R4
   \       0x5A   0x0004             MOVS     R4,R0
   \       0x5C   0x1C64             ADDS     R4,R4,#+1
   \       0x5E   0xB280             UXTH     R0,R0
   \       0x60   0x....             LDR      R1,??DataTable6_8
   \       0x62   0x4288             CMP      R0,R1
   \       0x64   0xDBF2             BLT      ??HAL_RADIO_CarrierSense_0
    236            end_time = WAKEUP->ABSOLUTE_TIME + 20;
   \                     ??HAL_RADIO_CarrierSense_2: (+1)
   \       0x66   0x....             LDR      R0,??DataTable6_9
   \       0x68   0x6807             LDR      R7,[R0, #+0]
   \       0x6A   0x3714             ADDS     R7,R7,#+20
    237            while(TIME_DIFF(end_time,WAKEUP->ABSOLUTE_TIME) > 0);
   \                     ??HAL_RADIO_CarrierSense_3: (+1)
   \       0x6C   0x6801             LDR      R1,[R0, #+0]
   \       0x6E   0x1A79             SUBS     R1,R7,R1
   \       0x70   0x2901             CMP      R1,#+1
   \       0x72   0xDAFB             BGE      ??HAL_RADIO_CarrierSense_3
    238            *DEMOD_DIG_TST_p = 0x02;
   \       0x74   0x2002             MOVS     R0,#+2
   \       0x76   0x9903             LDR      R1,[SP, #+12]
   \       0x78   0x6008             STR      R0,[R1, #+0]
    239            /* Need to wait at least 3 BLE clocks. In worst case (sysclock = 64 MHz and blesysclk = 16 MHz) 
    240               this means 12 cpu cycles. Some cycles are already used by the call to RADIO_ReadRSSI()
    241               and at the beginning of the function. */
    242            __NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();
   \       0x7A   0xBF00             Nop
   \       0x7C   0xBF00             Nop
   \       0x7E   0xBF00             Nop
   \       0x80   0xBF00             Nop
   \       0x82   0xBF00             Nop
   \       0x84   0xBF00             Nop
   \       0x86   0xBF00             Nop
   \       0x88   0xBF00             Nop
    243            *rssi = RADIO_ReadRSSI();
   \       0x8A   0x.... 0x....      BL       RADIO_ReadRSSI
   \       0x8E   0x9906             LDR      R1,[SP, #+24]
   \       0x90   0x7008             STRB     R0,[R1, #+0]
    244              *DEMOD_DIG_TST_p = 0x00;
   \       0x92   0x9803             LDR      R0,[SP, #+12]
   \       0x94   0x6005             STR      R5,[R0, #+0]
    245            BLUE->CMDREG = BLUE_CMDREG_TXRXSKIP;
   \       0x96   0x2001             MOVS     R0,#+1
   \       0x98   0x....             LDR      R1,??DataTable6_10
   \       0x9A   0x6008             STR      R0,[R1, #+0]
    246            
    247            return 0;
   \       0x9C   0x2000             MOVS     R0,#+0
   \                     ??HAL_RADIO_CarrierSense_1: (+1)
   \       0x9E   0xB007             ADD      SP,SP,#+28
   \       0xA0   0xBDF0             POP      {R4-R7,PC}
    248          }

   \                                 In section .bss, align 1
   \                     `HAL_RADIO_CarrierSense::buffer`:
   \        0x0                      DS8 1
    249          
    250          
    251          /**
    252          * @brief  This routine receives a packet on a specific channel and at a certain time.
    253          * @param  channel: Frequency channel between 0 to 39.
    254          * @param  wakeup_time: Time of transmission based on us. This is relative time regarding now.
    255          *         Minimum wakeup_time of 230 us. TBR
    256          * @param  rxBuffer: Pointer to RX data buffer. Second byte of this buffer must be the length of the data.
    257          * @param  receive_timeout: Time of RX window used to wait for the packet on us.
    258          * @param  receive_length: number of bytes that the link layer accepts in reception.
    259          * @param  callback: This function is being called as data routine.
    260          *         First ActionPacket is current action packet and the second one is next action packet.
    261          * @retval uint8_t return value
    262          *           - 0x00 : Success.
    263          *           - 0xC0 : Invalid parameter.
    264          *           - 0xC4 : Radio is busy, receiving has not been triggered.
    265          */

   \                                 In section .text, align 2, keep-with-next
    266          uint8_t HAL_RADIO_ReceivePacket(uint8_t channel, 
    267                                          uint32_t wakeup_time, 
    268                                          uint8_t* rxBuffer,
    269                                          uint32_t receive_timeout,                       
    270                                          uint8_t receive_length, 
    271                                          uint8_t (*Callback)(ActionPacket*, ActionPacket*))
    272          {
   \                     HAL_RADIO_ReceivePacket: (+1)
   \        0x0   0xB5FF             PUSH     {R0-R7,LR}
   \        0x2   0xB083             SUB      SP,SP,#+12
    273            uint8_t returnValue = SUCCESS_0;
   \        0x4   0x2400             MOVS     R4,#+0
   \        0x6   0x0025             MOVS     R5,R4
    274            uint32_t dummy,time;
    275            
    276            time = (uint32_t)TIMER_GetCurrentSysTime() + TIMER_UsToSystime(wakeup_time);
   \        0x8   0x.... 0x....      BL       TIMER_GetCurrentSysTime
   \        0xC   0x0002             MOVS     R2,R0
   \        0xE   0x0016             MOVS     R6,R2
   \       0x10   0x9804             LDR      R0,[SP, #+16]
   \       0x12   0x.... 0x....      BL       TIMER_UsToSystime
   \       0x16   0x0032             MOVS     R2,R6
   \       0x18   0x1817             ADDS     R7,R2,R0
    277            
    278            if(channel > 39) {
   \       0x1A   0x4668             MOV      R0,SP
   \       0x1C   0x7B00             LDRB     R0,[R0, #+12]
   \       0x1E   0x2828             CMP      R0,#+40
   \       0x20   0xDB01             BLT      ??HAL_RADIO_ReceivePacket_0
    279              returnValue = INVALID_PARAMETER_C0;
   \       0x22   0x20C0             MOVS     R0,#+192
   \       0x24   0x0005             MOVS     R5,R0
    280            }
    281            
    282            if(RADIO_GetStatus(&dummy) != BLUE_IDLE_0) {
   \                     ??HAL_RADIO_ReceivePacket_0: (+1)
   \       0x26   0x4668             MOV      R0,SP
   \       0x28   0x.... 0x....      BL       RADIO_GetStatus
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD001             BEQ      ??HAL_RADIO_ReceivePacket_1
    283              returnValue = RADIO_BUSY_C4;
   \       0x30   0x20C4             MOVS     R0,#+196
   \       0x32   0x0005             MOVS     R5,R0
    284            }
    285            
    286            if(returnValue == SUCCESS_0) {
   \                     ??HAL_RADIO_ReceivePacket_1: (+1)
   \       0x34   0x0028             MOVS     R0,R5
   \       0x36   0xB2C0             UXTB     R0,R0
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD130             BNE      ??HAL_RADIO_ReceivePacket_2
    287              uint8_t map[5]= {0xFF,0xFF,0xFF,0xFF,0xFF};
   \       0x3C   0xA801             ADD      R0,SP,#+4
   \       0x3E   0x....             LDR      R1,??DataTable6_11
   \       0x40   0xC90C             LDM      R1!,{R2,R3}
   \       0x42   0xC00C             STM      R0!,{R2,R3}
   \       0x44   0x3908             SUBS     R1,R1,#+8
   \       0x46   0x3808             SUBS     R0,R0,#+8
    288              RADIO_SetChannelMap(0, &map[0]);
   \       0x48   0xA901             ADD      R1,SP,#+4
   \       0x4A   0x2000             MOVS     R0,#+0
   \       0x4C   0x.... 0x....      BL       RADIO_SetChannelMap
    289              RADIO_SetChannel(0, channel, 0);
   \       0x50   0x2200             MOVS     R2,#+0
   \       0x52   0x4668             MOV      R0,SP
   \       0x54   0x7B01             LDRB     R1,[R0, #+12]
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0x.... 0x....      BL       RADIO_SetChannel
    290              RADIO_SetTxAttributes(0, networkID, 0x555555);
   \       0x5C   0x....             LDR      R2,??DataTable5_2
   \       0x5E   0x....             LDR      R0,??DataTable5
   \       0x60   0x6801             LDR      R1,[R0, #+0]
   \       0x62   0x2000             MOVS     R0,#+0
   \       0x64   0x.... 0x....      BL       RADIO_SetTxAttributes
    291              RADIO_SetGlobalReceiveTimeout(receive_timeout);
   \       0x68   0x9806             LDR      R0,[SP, #+24]
   \       0x6A   0x.... 0x....      BL       RADIO_SetGlobalReceiveTimeout
    292              
    293              
    294              aPacket[0].StateMachineNo = STATE_MACHINE_0;
   \       0x6E   0x....             LDR      R6,??DataTable5_3
   \       0x70   0x0020             MOVS     R0,R4
   \       0x72   0x7030             STRB     R0,[R6, #+0]
    295              aPacket[0].ActionTag =  PLL_TRIG;
   \       0x74   0x2001             MOVS     R0,#+1
   \       0x76   0x7070             STRB     R0,[R6, #+1]
    296              aPacket[0].WakeupTime = time;
   \       0x78   0x6077             STR      R7,[R6, #+4]
    297              aPacket[0].MaxReceiveLength = receive_length;
   \       0x7A   0xA80C             ADD      R0,SP,#+48
   \       0x7C   0x7800             LDRB     R0,[R0, #+0]
   \       0x7E   0x70B0             STRB     R0,[R6, #+2]
    298              aPacket[0].data = rxBuffer;
   \       0x80   0x9805             LDR      R0,[SP, #+20]
   \       0x82   0x60B0             STR      R0,[R6, #+8]
    299              aPacket[0].next_true = NULL_0;
   \       0x84   0x62F4             STR      R4,[R6, #+44]
    300              aPacket[0].next_false = NULL_0;
   \       0x86   0x6334             STR      R4,[R6, #+48]
    301              aPacket[0].condRoutine = CondRoutineTrue;
   \       0x88   0x....             LDR      R0,??DataTable6
   \       0x8A   0x6370             STR      R0,[R6, #+52]
    302              aPacket[0].dataRoutine = Callback;
   \       0x8C   0x980D             LDR      R0,[SP, #+52]
   \       0x8E   0x63B0             STR      R0,[R6, #+56]
    303              
    304              RADIO_SetReservedArea(&aPacket[0]);
   \       0x90   0x0030             MOVS     R0,R6
   \       0x92   0x.... 0x....      BL       RADIO_SetReservedArea
    305              returnValue = RADIO_MakeActionPacketPending(&aPacket[0]);
   \       0x96   0x0030             MOVS     R0,R6
   \       0x98   0x.... 0x....      BL       RADIO_MakeActionPacketPending
   \       0x9C   0x0005             MOVS     R5,R0
    306            }
    307            
    308            return returnValue;
   \                     ??HAL_RADIO_ReceivePacket_2: (+1)
   \       0x9E   0x0028             MOVS     R0,R5
   \       0xA0   0xB2C0             UXTB     R0,R0
   \       0xA2   0xB007             ADD      SP,SP,#+28
   \       0xA4   0xBDF0             POP      {R4-R7,PC}
    309          }
    310          
    311          
    312          /**
    313          * @brief  This routine receives a packet on a specific channel and at a certain time.
    314          *         Then sends a packet as an acknowledgment.
    315          * @param  channel: frequency channel between 0 to 39.
    316          * @param  wakeup_time: time of transmission based on us. This is relative time regarding now.
    317          *         Minimum wakeup_time of 250 us. TBR
    318          * @param  rxBuffer: points to received data buffer. second byte of this buffer determines the length of the data.
    319          * @param  txBuffer: points to data buffer to send. secound byte of this buffer must be the length of the buffer.
    320          * @param  receive_timeout: Time of RX window used to wait for the packet on us.
    321          * @param  receive_length: number of bytes that the link layer accepts in reception.
    322          * @param  callback: This function is being called as data routine.
    323          *         First ActionPacket is current action packet and the second one is next action packet.
    324          * @retval uint8_t return value
    325          *           - 0x00 : Success.
    326          *           - 0xC0 : Invalid parameter.
    327          *           - 0xC4 : Radio is busy, receiving has not been triggered.
    328          */

   \                                 In section .text, align 2, keep-with-next
    329          uint8_t HAL_RADIO_ReceivePacketWithAck(uint8_t channel, 
    330                                                 uint32_t wakeup_time,
    331                                                 uint8_t* rxBuffer, 
    332                                                 uint8_t* txBuffer,
    333                                                 uint32_t receive_timeout,
    334                                                 uint8_t receive_length, 
    335                                                 uint8_t (*Callback)(ActionPacket*, ActionPacket*))
    336          {
   \                     HAL_RADIO_ReceivePacketWithAck: (+1)
   \        0x0   0xB5FF             PUSH     {R0-R7,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
    337            uint8_t returnValue = SUCCESS_0;
   \        0x4   0x2400             MOVS     R4,#+0
   \        0x6   0x0027             MOVS     R7,R4
    338            uint32_t dummy,time;
    339            
    340            time = (uint32_t)TIMER_GetCurrentSysTime() + TIMER_UsToSystime(wakeup_time);
   \        0x8   0x.... 0x....      BL       TIMER_GetCurrentSysTime
   \        0xC   0x0002             MOVS     R2,R0
   \        0xE   0x0015             MOVS     R5,R2
   \       0x10   0x9806             LDR      R0,[SP, #+24]
   \       0x12   0x.... 0x....      BL       TIMER_UsToSystime
   \       0x16   0x002A             MOVS     R2,R5
   \       0x18   0x1810             ADDS     R0,R2,R0
   \       0x1A   0x9000             STR      R0,[SP, #+0]
    341            
    342            if(channel > 39) {
   \       0x1C   0x4668             MOV      R0,SP
   \       0x1E   0x7D00             LDRB     R0,[R0, #+20]
   \       0x20   0x2828             CMP      R0,#+40
   \       0x22   0xDB01             BLT      ??HAL_RADIO_ReceivePacketWithAck_0
    343              returnValue = INVALID_PARAMETER_C0;      
   \       0x24   0x20C0             MOVS     R0,#+192
   \       0x26   0x0007             MOVS     R7,R0
    344            }
    345            
    346            if(RADIO_GetStatus(&dummy) != BLUE_IDLE_0) {
   \                     ??HAL_RADIO_ReceivePacketWithAck_0: (+1)
   \       0x28   0xA801             ADD      R0,SP,#+4
   \       0x2A   0x.... 0x....      BL       RADIO_GetStatus
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD001             BEQ      ??HAL_RADIO_ReceivePacketWithAck_1
    347              returnValue = RADIO_BUSY_C4;
   \       0x32   0x20C4             MOVS     R0,#+196
   \       0x34   0x0007             MOVS     R7,R0
    348            }
    349              
    350            if(returnValue == SUCCESS_0) {
   \                     ??HAL_RADIO_ReceivePacketWithAck_1: (+1)
   \       0x36   0x0038             MOVS     R0,R7
   \       0x38   0xB2C0             UXTB     R0,R0
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD147             BNE      ??HAL_RADIO_ReceivePacketWithAck_2
    351              uint8_t map[5]= {0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU};
   \       0x3E   0xA802             ADD      R0,SP,#+8
   \       0x40   0x....             LDR      R1,??DataTable6_12
   \       0x42   0xC90C             LDM      R1!,{R2,R3}
   \       0x44   0xC00C             STM      R0!,{R2,R3}
   \       0x46   0x3908             SUBS     R1,R1,#+8
   \       0x48   0x3808             SUBS     R0,R0,#+8
    352            
    353              RADIO_SetChannelMap(0, &map[0]);
   \       0x4A   0xA902             ADD      R1,SP,#+8
   \       0x4C   0x2000             MOVS     R0,#+0
   \       0x4E   0x.... 0x....      BL       RADIO_SetChannelMap
    354              RADIO_SetChannel(0, channel, 0);
   \       0x52   0x2200             MOVS     R2,#+0
   \       0x54   0x4668             MOV      R0,SP
   \       0x56   0x7D01             LDRB     R1,[R0, #+20]
   \       0x58   0x2000             MOVS     R0,#+0
   \       0x5A   0x.... 0x....      BL       RADIO_SetChannel
    355              RADIO_SetTxAttributes(0, networkID, 0x555555);
   \       0x5E   0x....             LDR      R2,??DataTable6_13
   \       0x60   0x....             LDR      R0,??DataTable6_14
   \       0x62   0x6801             LDR      R1,[R0, #+0]
   \       0x64   0x2000             MOVS     R0,#+0
   \       0x66   0x.... 0x....      BL       RADIO_SetTxAttributes
    356              RADIO_SetGlobalReceiveTimeout(receive_timeout);
   \       0x6A   0x980E             LDR      R0,[SP, #+56]
   \       0x6C   0x.... 0x....      BL       RADIO_SetGlobalReceiveTimeout
    357              
    358              aPacket[0].StateMachineNo = STATE_MACHINE_0;
   \       0x70   0x....             LDR      R5,??DataTable6_15
   \       0x72   0x0020             MOVS     R0,R4
   \       0x74   0x7028             STRB     R0,[R5, #+0]
    359              aPacket[0].ActionTag =  PLL_TRIG;
   \       0x76   0x2001             MOVS     R0,#+1
   \       0x78   0x7068             STRB     R0,[R5, #+1]
    360              aPacket[0].WakeupTime = time;
   \       0x7A   0x9800             LDR      R0,[SP, #+0]
   \       0x7C   0x6068             STR      R0,[R5, #+4]
    361              aPacket[0].MaxReceiveLength = receive_length;
   \       0x7E   0xA80F             ADD      R0,SP,#+60
   \       0x80   0x7800             LDRB     R0,[R0, #+0]
   \       0x82   0x70A8             STRB     R0,[R5, #+2]
    362              aPacket[0].data = rxBuffer;
   \       0x84   0x9807             LDR      R0,[SP, #+28]
   \       0x86   0x60A8             STR      R0,[R5, #+8]
    363              aPacket[0].next_true = &aPacket[1];
   \       0x88   0x....             LDR      R6,??DataTable6_16
   \       0x8A   0x62EE             STR      R6,[R5, #+44]
    364              aPacket[0].next_false = NULL_0;
   \       0x8C   0x632C             STR      R4,[R5, #+48]
    365              aPacket[0].condRoutine = CondRoutineRxTrue;
   \       0x8E   0x....             LDR      R0,??DataTable6_17
   \       0x90   0x6368             STR      R0,[R5, #+52]
    366              aPacket[0].dataRoutine = Callback;
   \       0x92   0x9810             LDR      R0,[SP, #+64]
   \       0x94   0x63A8             STR      R0,[R5, #+56]
    367                  
    368              aPacket[1].StateMachineNo = STATE_MACHINE_0;
   \       0x96   0x0020             MOVS     R0,R4
   \       0x98   0x7030             STRB     R0,[R6, #+0]
    369              aPacket[1].ActionTag =  TXRX;
   \       0x9A   0x2002             MOVS     R0,#+2
   \       0x9C   0x2141             MOVS     R1,#+65
   \       0x9E   0x5468             STRB     R0,[R5, R1]
    370              aPacket[1].WakeupTime = time;
   \       0xA0   0x9800             LDR      R0,[SP, #+0]
   \       0xA2   0x6468             STR      R0,[R5, #+68]
    371              aPacket[1].MaxReceiveLength = 0; /* does not affect for Tx */
   \       0xA4   0x0020             MOVS     R0,R4
   \       0xA6   0x2142             MOVS     R1,#+66
   \       0xA8   0x5468             STRB     R0,[R5, R1]
    372              aPacket[1].data = txBuffer;
   \       0xAA   0x9808             LDR      R0,[SP, #+32]
   \       0xAC   0x64A8             STR      R0,[R5, #+72]
    373              aPacket[1].next_true = NULL_0;
   \       0xAE   0x66EC             STR      R4,[R5, #+108]
    374              aPacket[1].next_false = NULL_0;
   \       0xB0   0x672C             STR      R4,[R5, #+112]
    375              aPacket[1].condRoutine = CondRoutineTrue;
   \       0xB2   0x....             LDR      R0,??DataTable6
   \       0xB4   0x6768             STR      R0,[R5, #+116]
    376              aPacket[1].dataRoutine = Callback;
   \       0xB6   0x9810             LDR      R0,[SP, #+64]
   \       0xB8   0x67A8             STR      R0,[R5, #+120]
    377              
    378              RADIO_SetReservedArea(&aPacket[0]); 
   \       0xBA   0x0028             MOVS     R0,R5
   \       0xBC   0x.... 0x....      BL       RADIO_SetReservedArea
    379              RADIO_SetReservedArea(&aPacket[1]); 
   \       0xC0   0x0030             MOVS     R0,R6
   \       0xC2   0x.... 0x....      BL       RADIO_SetReservedArea
    380              returnValue = RADIO_MakeActionPacketPending(&aPacket[0]);
   \       0xC6   0x0028             MOVS     R0,R5
   \       0xC8   0x.... 0x....      BL       RADIO_MakeActionPacketPending
   \       0xCC   0x0007             MOVS     R7,R0
    381            }
    382            
    383            return returnValue; 
   \                     ??HAL_RADIO_ReceivePacketWithAck_2: (+1)
   \       0xCE   0x0038             MOVS     R0,R7
   \       0xD0   0xB2C0             UXTB     R0,R0
   \       0xD2   0xB009             ADD      SP,SP,#+36
   \       0xD4   0xBDF0             POP      {R4-R7,PC}
    384          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0x....'....        DC32     networkID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0x0055'5555        DC32     0x555555

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \        0x0   0x....'....        DC32     aPacket

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0x....'....        DC32     CondRoutineTrue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \        0x0   0x....'....        DC32     dataRoutineNull

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \        0x0   0x6000'1564        DC32     0x60001564

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \        0x0   0xAAAA'AAAA        DC32     0xaaaaaaaa

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \        0x0   0x....'....        DC32     CarrierSenseCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \        0x0   0x....'....        DC32     `HAL_RADIO_CarrierSense::buffer`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \        0x0   0x6000'1698        DC32     0x60001698

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \        0x0   0x0000'EA60        DC32     0xea60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \        0x0   0x6000'1810        DC32     0x60001810

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \        0x0   0x6000'0018        DC32     0x60000018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \        0x0   0x0055'5555        DC32     0x555555

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \        0x0   0x....'....        DC32     networkID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \        0x0   0x....'....        DC32     aPacket

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \        0x0   0x....'....        DC32     aPacket+0x40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \        0x0   0x....'....        DC32     CondRoutineRxTrue

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0xFF 0xFF          DC8 255, 255, 255, 255, 255

   \              0xFF 0xFF    

   \              0xFF
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0xFF 0xFF          DC8 255, 255, 255, 255, 255

   \              0xFF 0xFF    

   \              0xFF
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0xFF 0xFF          DC8 255, 255, 255, 255, 255

   \              0xFF 0xFF    

   \              0xFF
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0xFF 0xFF          DC8 255, 255, 255, 255, 255

   \              0xFF 0xFF    

   \              0xFF
   \        0x5                      DS8 3
    385          /******************* (C) COPYRIGHT 2019 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   CarrierSenseCallback
       4   CondRoutineRxTrue
       0   CondRoutineTrue
      48   HAL_RADIO_CarrierSense
        48   -> HAL_RADIO_ReceivePacket
        48   -> RADIO_ReadRSSI
      48   HAL_RADIO_ReceivePacket
        48   -> RADIO_GetStatus
        48   -> RADIO_MakeActionPacketPending
        48   -> RADIO_SetChannel
        48   -> RADIO_SetChannelMap
        48   -> RADIO_SetGlobalReceiveTimeout
        48   -> RADIO_SetReservedArea
        48   -> RADIO_SetTxAttributes
        48   -> TIMER_GetCurrentSysTime
        48   -> TIMER_UsToSystime
      56   HAL_RADIO_ReceivePacketWithAck
        56   -> RADIO_GetStatus
        56   -> RADIO_MakeActionPacketPending
        56   -> RADIO_SetChannel
        56   -> RADIO_SetChannelMap
        56   -> RADIO_SetGlobalReceiveTimeout
        56   -> RADIO_SetReservedArea
        56   -> RADIO_SetTxAttributes
        56   -> TIMER_GetCurrentSysTime
        56   -> TIMER_UsToSystime
      48   HAL_RADIO_SendPacket
        48   -> RADIO_GetStatus
        48   -> RADIO_MakeActionPacketPending
        48   -> RADIO_SetChannel
        48   -> RADIO_SetChannelMap
        48   -> RADIO_SetReservedArea
        48   -> RADIO_SetTxAttributes
        48   -> TIMER_GetCurrentSysTime
        48   -> TIMER_UsToSystime
      56   HAL_RADIO_SendPacketWithAck
        56   -> RADIO_GetStatus
        56   -> RADIO_MakeActionPacketPending
        56   -> RADIO_SetChannel
        56   -> RADIO_SetChannelMap
        56   -> RADIO_SetGlobalReceiveTimeout
        56   -> RADIO_SetReservedArea
        56   -> RADIO_SetTxAttributes
        56   -> TIMER_GetCurrentSysTime
        56   -> TIMER_UsToSystime
       0   HAL_RADIO_SetNetworkID
       0   dataRoutineNull


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
       8  ?_0
       8  ?_1
       8  ?_2
       8  ?_3
       6  CarrierSenseCallback
      18  CondRoutineRxTrue
       6  CondRoutineTrue
     162  HAL_RADIO_CarrierSense
     166  HAL_RADIO_ReceivePacket
     214  HAL_RADIO_ReceivePacketWithAck
     158  HAL_RADIO_SendPacket
     204  HAL_RADIO_SendPacketWithAck
      10  HAL_RADIO_SetNetworkID
     128  aPacket
       1  buffer
       6  dataRoutineNull
       4  networkID

 
   129 bytes in section .bss
     4 bytes in section .data
    32 bytes in section .rodata
 1'038 bytes in section .text
 
 1'038 bytes of CODE  memory
    32 bytes of CONST memory
   133 bytes of DATA  memory

Errors: none
Warnings: none
